#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import rospy
import numpy as np
from sensor_msgs.msg import LaserScan
from autlab3.msg import ArrayXY
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
import tf


def rotFromQuat(q):
    """ q = [ex, ey, ez, ew]
    """
    return np.array([[2.*(q[3]**2+q[0]**2)-1., 2.*(q[0]*q[1]-q[3]*q[2]), 2.*(q[0]*q[2]+q[3]*q[1])],
                     [2.*(q[0]*q[1]+q[3]*q[2]), 2.*(q[3]**2+q[1]**2)-1., 2.*(q[1]*q[2]-q[3]*q[0])],
                     [2.*(q[0]*q[2]-q[3]*q[1]), 2.*(q[1]*q[2]+q[3]*q[0]), 2.*(q[3]**2+q[2]**2)-1.]])


def Tlidar_wrt_base():
    """
    Sistema del lidar con respecto a base_link (la base del robot)
    """
    tflistener = tf.TransformListener()
    T = np.eye(4)
    rospy.sleep(0.5)
    try:
        (trans, rot) = tflistener.lookupTransform('base_link', 'base_scan', rospy.Time(0))
        T[0:3,0:3] = rotFromQuat(rot)
        T[0:3,3] = trans
    except:
        pass
    # Retorna la transformación homogénea del sistema del LiDAR con respecto al
    # sistema de base del robot.
    return T

class Lidar(object):
    def __init__(self):
        # Crear el suscriptor al tópico del LiDAR
        topic = '/scan'
        self.pub = rospy.Subscriber(topic, LaserScan, self.callback)
        self.datos = LaserScan()
        # Esperar 1 segundo
        rospy.sleep(1)
        
        # Almacenar los rangos máximo y mínimo que puede leer el LiDAR
        self.range_max = self.datos.range_max
        self.range_min = self.datos.range_min
        
    def callback(self, msg):
        # Callback para el suscriptor
        self.datos = msg
        
    def get_xy(self):
        """ Retorna los valores x,y de la medición, en el sistema del LiDAR
        """
        # Obtener los rangos medidos
        data = self.datos.ranges

        # Rango de valores de los ángulos, angle_min a angle_max, 
        # distancia entre cada punto proporcional a la cantidad de datos
        angle_min = self.datos.angle_min
        angle_max = self.datos.angle_max
        angles = np.linspace(angle_min, angle_max, len(data))

        x = []
        y = []
        data_filtered = []

        # Filtrar los rangos que no son válidos: mantener solo los rangos
        # válidos y sus correspondientes ángulos
        
        for i in range(0, len(data)):
            if data[i] < self.range_max or data[i] > self.range_min:
                data_filtered.append(data[i])

        angles = np.linspace(angle_min, angle_max, len(data_filtered))
        # Convertir los rangos válidos en x, y
       
        for i in range(0, len(data_filtered)): 
            x.append(data_filtered[i]*np.cos(angles[i])) 
            y.append(data_filtered[i]*np.sin(angles[i]))
        return x,y

# Iniciar nodo
rospy.init_node('nodo_obstaculo')

# Crear publicador
topic = 'cmd_vel'
pub = rospy.Publisher(topic, Twist, queue_size=10)

# Creación de instancia
ruta = Twist()

# Transformación del sistema del LiDAR al sistema del Robot
T_BL = Tlidar_wrt_base()
lidar = Lidar()

# Tiempo de ejecución del bucle (en Hz)
rate = rospy.Rate(10)
while not rospy.is_shutdown():
    # Coordenadas en el sistema del LiDAR
    x, y = lidar.get_xy()
    # Conversión a coordenadas homogéneas
    P = np.ones((4, len(x)))
    P[0,:] = x
    P[1,:] = y
    P[2,:] = np.zeros((1,len(x)))   # El LiDAR mide z=0 en su propio sistema
                
    # Conversión de las coordenadas del sistema del LiDAR al sistema del Robot
    P_robot = T_BL.dot(P)
    xr = P_robot[0,:]     # x en sistema del robot
    yr = P_robot[1,:]     # y en el sistema del robot

    for i in range(0, len(xr)):
        distance = (xr[i]**2 + yr[i]**2)**0.5
        if distance > 0.5: 
            ruta.linear.x   = 0.2
            ruta.angular.z  = 0.0
        else:
            ruta.linear.x   = 0.0
            ruta.angular.z  = 0.0

    # Esperar
    pub.publish(ruta)

    # Esperar
    rate.sleep()


